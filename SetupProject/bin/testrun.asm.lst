------- FILE testrun.asm LEVEL 1 PASS 2
      1  10000 ????
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE testrun.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????						;-------------------------------------------------------
    163  0000 ????						; SKIP_SCANLINES #lines
    164  0000 ????						;
    165  0000 ????						; Skip a given # of scanlines.
    166  0000 ????						; Sets the X register to zero.
    167  0000 ????
    168  0000 ????				      MAC	skip_scanlines
    169  0000 ????			   .LINES     SET	{1}
    170  0000 ????				      ldx	#.LINES
    171  0000 ????			   .vblank    sta	WSYNC
    172  0000 ????				      dex
    173  0000 ????				      bne	.vblank
    174  0000 ????				      ENDM
    175  0000 ????
    176  0000 ????						; EOF
------- FILE testrun.asm
------- FILE xmacro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"xmacro.h"
      1  0000 ????
      2  0000 ????						;-------------------------------------------------------
      3  0000 ????						; Usage: TIMER_SETUP lines
      4  0000 ????						; where lines is the number of scanlines to skip (> 2).
      5  0000 ????						; The timer will be set so that it expires before this number
      6  0000 ????						; of scanlines. A WSYNC will be done first.
      7  0000 ????
      8  0000 ????				      MAC	timer_setup
      9  0000 ????			   .lines     SET	{1}
     10  0000 ????			   .cycles    SET	((.lines * 76) - 13)
     11  0000 ????						; special case for when we have two timer events in a line
     12  0000 ????						; and our 2nd event straddles the WSYNC boundary
     13  0000 ????				      if	(.cycles % 64) < 12
     14  0000 ????				      lda	#(.cycles / 64) - 1
     15  0000 ????				      sta	WSYNC
     16  0000 ????				      else
     17  0000 ????				      lda	#(.cycles / 64)
     18  0000 ????				      sta	WSYNC
     19  0000 ????				      endif
     20  0000 ????				      sta	TIM64T
     21  0000 ????				      ENDM
     22  0000 ????
     23  0000 ????						;-------------------------------------------------------
     24  0000 ????						; Use with TIMER_SETUP to wait for timer to complete.
     25  0000 ????						; Performs a WSYNC afterwards.
     26  0000 ????
     27  0000 ????				      MAC	timer_wait
     28  0000 ????			   .waittimer
     29  0000 ????				      lda	INTIM
     30  0000 ????				      bne	.waittimer
     31  0000 ????				      sta	WSYNC
     32  0000 ????				      ENDM
------- FILE testrun.asm
      7  0000 ????
      8  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      9  0000 ????						;
     10  0000 ????						; This example demonstrates 48-pixel sprites.
     11  0000 ????						; We'll use a technique similar to the Asynchronous Playfields
     12  0000 ????						; trick -- reprogramming the TIA registers on-the-fly, writing
     13  0000 ????						; to each register multiple times during the scanline. If we
     14  0000 ????						; time our writes carefully, we'll be able to draw six unique
     15  0000 ????						; sprites per scanline, for example to draw a six-digit
     16  0000 ????						; scoreboard, or one large 48-pixel sprite.
     17  0000 ????						;
     18  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     19  0000 ????
     20 U0082 ????				      seg.u	Variables
     21 U0080					      org	$80
     22 U0080
     23 U0080		       00	   Temp       byte.b
     24 U0081		       00	   LoopCount  byte.b
     25 U0082
     26 U0082		       00 03	   THREE_COPIES equ	%011
     27 U0082
     28  10000 ????				       seg	Code
     29  f000					      org	$f000
     30  f000
     31  f000				   Start
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     33  f00b
     34  f00b				   NextFrame
      0  f00b					      VERTICAL_SYNC
      1  f00b		       a9 0e		      lda	#%1110
      2  f00d		       85 02	   .VSLP1     sta	WSYNC
      3  f00f		       85 00		      sta	VSYNC
      4  f011		       4a		      lsr
      5  f012		       d0 f9		      bne	.VSLP1
     36  f014
      0  f014					      TIMER_SETUP	37
      1  f014				   .lines     SET	37
      2  f014				   .cycles    SET	((.lines * 76) - 13)
      3  f014
      4  f014
      5  f014				  -	      if	(.cycles % 64) < 12
      6  f014				  -	      lda	#(.cycles / 64) - 1
      7  f014				  -	      sta	WSYNC
      8  f014					      else
      9  f014		       a9 2b		      lda	#(.cycles / 64)
     10  f016		       85 02		      sta	WSYNC
     11  f018					      endif
     12  f018		       8d 96 02 	      sta	TIM64T
     38  f01b		       a9 40		      lda	#64
     39  f01d		       85 81		      sta	LoopCount	; scanline counter
     40  f01f		       a9 ff		      lda	#$ff
     41  f021		       85 09		      sta	COLUBK	; background color
     42  f023		       a9 22		      lda	#$22
     43  f025		       85 06		      sta	COLUP0	; show how players alternate
     44  f027		       a9 12		      lda	#$12
     45  f029		       85 07		      sta	COLUP1	; by having different colors
     46  f02b		       a9 03		      lda	#THREE_COPIES
     47  f02d		       85 04		      sta	NUSIZ0
     48  f02f		       85 05		      sta	NUSIZ1	; both players have 3 copies
     49  f031		       85 02		      sta	WSYNC
      0  f033					      SLEEP	20
      1  f033				   .CYCLES    SET	20
      2  f033
      3  f033				  -	      IF	.CYCLES < 2
      4  f033				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f033				  -	      ERR
      6  f033					      ENDIF
      7  f033
      8  f033				  -	      IF	.CYCLES & 1
      9  f033				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f033				  -	      nop	0
     11  f033				  -	      ELSE
     12  f033				  -	      bit	VSYNC
     13  f033				  -	      ENDIF
     14  f033				  -.CYCLES    SET	.CYCLES - 3
     15  f033					      ENDIF
     16  f033
     17  f033					      REPEAT	.CYCLES / 2
     18  f033		       ea		      nop
     17  f033					      REPEND
     18  f034		       ea		      nop
     17  f034					      REPEND
     18  f035		       ea		      nop
     17  f035					      REPEND
     18  f036		       ea		      nop
     17  f036					      REPEND
     18  f037		       ea		      nop
     17  f037					      REPEND
     18  f038		       ea		      nop
     17  f038					      REPEND
     18  f039		       ea		      nop
     17  f039					      REPEND
     18  f03a		       ea		      nop
     17  f03a					      REPEND
     18  f03b		       ea		      nop
     17  f03b					      REPEND
     18  f03c		       ea		      nop
     19  f03d					      REPEND
     51  f03d		       85 10		      sta	RESP0	; position 1st player
     52  f03f		       85 11		      sta	RESP1	; ...and 2nd player
     53  f041		       a9 10		      lda	#$10
     54  f043		       85 21		      sta	HMP1	; 1 pixel to the left
     55  f045		       85 02		      sta	WSYNC
     56  f047		       85 2a		      sta	HMOVE	; apply HMOVE
      0  f049					      SLEEP	24	; sleep 24 cycles
      1  f049				   .CYCLES    SET	24
      2  f049
      3  f049				  -	      IF	.CYCLES < 2
      4  f049				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f049				  -	      ERR
      6  f049					      ENDIF
      7  f049
      8  f049				  -	      IF	.CYCLES & 1
      9  f049				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f049				  -	      nop	0
     11  f049				  -	      ELSE
     12  f049				  -	      bit	VSYNC
     13  f049				  -	      ENDIF
     14  f049				  -.CYCLES    SET	.CYCLES - 3
     15  f049					      ENDIF
     16  f049
     17  f049					      REPEAT	.CYCLES / 2
     18  f049		       ea		      nop
     17  f049					      REPEND
     18  f04a		       ea		      nop
     17  f04a					      REPEND
     18  f04b		       ea		      nop
     17  f04b					      REPEND
     18  f04c		       ea		      nop
     17  f04c					      REPEND
     18  f04d		       ea		      nop
     17  f04d					      REPEND
     18  f04e		       ea		      nop
     17  f04e					      REPEND
     18  f04f		       ea		      nop
     17  f04f					      REPEND
     18  f050		       ea		      nop
     17  f050					      REPEND
     18  f051		       ea		      nop
     17  f051					      REPEND
     18  f052		       ea		      nop
     17  f052					      REPEND
     18  f053		       ea		      nop
     17  f053					      REPEND
     18  f054		       ea		      nop
     19  f055					      REPEND
     58  f055		       85 2b		      sta	HMCLR	; clear HMOVE registers
     59  f057		       a9 01		      lda	#1
     60  f059		       85 25		      sta	VDELP0	; we need the VDEL registers
     61  f05b		       85 26		      sta	VDELP1	; so we can do our 4-store trick
      0  f05d					      TIMER_WAIT
      1  f05d				   .waittimer
      2  f05d		       ad 84 02 	      lda	INTIM
      3  f060		       d0 fb		      bne	.waittimer
      4  f062		       85 02		      sta	WSYNC
     63  f064
      0  f064					      TIMER_SETUP	192
      1  f064				   .lines     SET	192
      2  f064				   .cycles    SET	((.lines * 76) - 13)
      3  f064
      4  f064
      5  f064				  -	      if	(.cycles % 64) < 12
      6  f064				  -	      lda	#(.cycles / 64) - 1
      7  f064				  -	      sta	WSYNC
      8  f064					      else
      9  f064		       a9 e3		      lda	#(.cycles / 64)
     10  f066		       85 02		      sta	WSYNC
     11  f068					      endif
     12  f068		       8d 96 02 	      sta	TIM64T
     65  f06b
      0  f06b					      SLEEP	40	; start near end of scanline
      1  f06b				   .CYCLES    SET	40
      2  f06b
      3  f06b				  -	      IF	.CYCLES < 2
      4  f06b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f06b				  -	      ERR
      6  f06b					      ENDIF
      7  f06b
      8  f06b				  -	      IF	.CYCLES & 1
      9  f06b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f06b				  -	      nop	0
     11  f06b				  -	      ELSE
     12  f06b				  -	      bit	VSYNC
     13  f06b				  -	      ENDIF
     14  f06b				  -.CYCLES    SET	.CYCLES - 3
     15  f06b					      ENDIF
     16  f06b
     17  f06b					      REPEAT	.CYCLES / 2
     18  f06b		       ea		      nop
     17  f06b					      REPEND
     18  f06c		       ea		      nop
     17  f06c					      REPEND
     18  f06d		       ea		      nop
     17  f06d					      REPEND
     18  f06e		       ea		      nop
     17  f06e					      REPEND
     18  f06f		       ea		      nop
     17  f06f					      REPEND
     18  f070		       ea		      nop
     17  f070					      REPEND
     18  f071		       ea		      nop
     17  f071					      REPEND
     18  f072		       ea		      nop
     17  f072					      REPEND
     18  f073		       ea		      nop
     17  f073					      REPEND
     18  f074		       ea		      nop
     17  f074					      REPEND
     18  f075		       ea		      nop
     17  f075					      REPEND
     18  f076		       ea		      nop
     17  f076					      REPEND
     18  f077		       ea		      nop
     17  f077					      REPEND
     18  f078		       ea		      nop
     17  f078					      REPEND
     18  f079		       ea		      nop
     17  f079					      REPEND
     18  f07a		       ea		      nop
     17  f07a					      REPEND
     18  f07b		       ea		      nop
     17  f07b					      REPEND
     18  f07c		       ea		      nop
     17  f07c					      REPEND
     18  f07d		       ea		      nop
     17  f07d					      REPEND
     18  f07e		       ea		      nop
     19  f07f					      REPEND
     67  f07f				   BigLoop
     68  f07f		       a4 81		      ldy	LoopCount	; counts backwards
     69  f081		       b9 00 f1 	      lda	Bitmap0,y	; load B0 (1st sprite byte)
     70  f084		       85 1b		      sta	GRP0	; B0 -> [GRP0]
     71  f086		       b9 41 f1 	      lda	Bitmap1,y	; load B1 -> A
     72  f089		       85 1c		      sta	GRP1	; B1 -> [GRP1], B0 -> GRP0
     73  f08b		       85 02		      sta	WSYNC	; sync to next scanline
     74  f08d		       b9 82 f1 	      lda	Bitmap2,y	; load B2 -> A
     75  f090		       85 1b		      sta	GRP0	; B2 -> [GRP0], B1 -> GRP1
     76  f092		       b9 45 f2 	      lda	Bitmap5,y	; load B5 -> A
     77  f095		       85 80		      sta	Temp	; B5 -> temp
     78  f097		       be 04 f2 	      ldx	Bitmap4,y	; load B4 -> X
     79  f09a		       b9 c3 f1 	      lda	Bitmap3,y	; load B3 -> A
     80  f09d		       a4 80		      ldy	Temp	; load B5 -> Y
     81  f09f		       85 1c		      sta	GRP1	; B3 -> [GRP1]; B2 -> GRP0
     82  f0a1		       86 1b		      stx	GRP0	; B4 -> [GRP0]; B3 -> GRP1
     83  f0a3		       84 1c		      sty	GRP1	; B5 -> [GRP1]; B4 -> GRP0
     84  f0a5		       85 1b		      sta	GRP0	; ?? -> [GRP0]; B5 -> GRP1
     85  f0a7		       c6 81		      dec	LoopCount	; go to next line
     86  f0a9		       10 d4		      bpl	BigLoop	; repeat until < 0
     87  f0ab
      0  f0ab					      TIMER_WAIT
      1  f0ab				   .waittimer
      2  f0ab		       ad 84 02 	      lda	INTIM
      3  f0ae		       d0 fb		      bne	.waittimer
      4  f0b0		       85 02		      sta	WSYNC
     89  f0b2
      0  f0b2					      TIMER_SETUP	29
      1  f0b2				   .lines     SET	29
      2  f0b2				   .cycles    SET	((.lines * 76) - 13)
      3  f0b2
      4  f0b2
      5  f0b2				  -	      if	(.cycles % 64) < 12
      6  f0b2				  -	      lda	#(.cycles / 64) - 1
      7  f0b2				  -	      sta	WSYNC
      8  f0b2					      else
      9  f0b2		       a9 22		      lda	#(.cycles / 64)
     10  f0b4		       85 02		      sta	WSYNC
     11  f0b6					      endif
     12  f0b6		       8d 96 02 	      sta	TIM64T
      0  f0b9					      TIMER_WAIT
      1  f0b9				   .waittimer
      2  f0b9		       ad 84 02 	      lda	INTIM
      3  f0bc		       d0 fb		      bne	.waittimer
      4  f0be		       85 02		      sta	WSYNC
     92  f0c0		       4c 0b f0 	      jmp	NextFrame
     93  f0c3
     94  f0c3							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     95  f0c3							; Bitmap data, six columns
     96  f0c3
     97  f100		       00 00 00 00*	      align	$100	; ensure we start on a page boundary
     98  f100							;;{w:8,h:65,count:6,brev:1,flip:1};;
     99  f100				   Bitmap0
    100  f100		       00		      hex	00
    101  f101		       00 00 00 00*	      hex	00000000000000000000000000000000
    102  f111		       00 00 00 00*	      hex	00000000000000000000000000000001
    103  f121		       01 01 02 05*	      hex	01010205040402040404040404040404
    104  f131		       04 04 04 06*	      hex	040404060203000107df7f1f0f000000
    105  f141				   Bitmap1
    106  f141		       00		      hex	00
    107  f142		       00 00 07 3f*	      hex	0000073f1f0303000000000000010704
    108  f152		       08 08 10 10*	      hex	0808101010101412120a0a1e75c38000
    109  f162		       00 00 07 62*	      hex	0000076260e0e0e0c0c0e0e0c0c00000
    110  f172		       00 00 00 00*	      hex	00000000408170feffffffffc7030000
    111  f182				   Bitmap2
    112  f182		       00		      hex	00
    113  f183		       00 7f ff fc*	      hex	007ffffcf0e0c0404040404020bb7608
    114  f193		       00 04 02 02*	      hex	000402020809094f494949fa07010000
    115  f1a3		       00 00 00 00*	      hex	00000000006070f0f0f0c0e0e0e0e0e0
    116  f1b3		       40 00 00 00*	      hex	400000000010a06010e0e0f1ffff7f00
    117  f1c3				   Bitmap3
    118  f1c3		       00		      hex	00
    119  f1c4		       3e ff ff 07*	      hex	3effff07010000000000302159878184
    120  f1d4		       84 8e fe ff*	      hex	848efeffffff9f0f0e9c7c0402c12010
    121  f1e4		       08 04 02 07*	      hex	08040207050000000002020104070f0f
    122  f1f4		       0f 07 07 03*	      hex	0f070703030707070f1f7efcf8f0c000
    123  f204				   Bitmap4
    124  f204		       00		      hex	00
    125  f205		       00 f0 f0 ff*	      hex	00f0f0fffff0404040404080641e02c3
    126  f215		       42 42 c3 e2*	      hex	4242c3e2e2f4fcfc787838787cfa3131
    127  f225		       61 02 02 1c*	      hex	6102021cf840c04042a022c14080c4c3
    128  f235		       c0 c0 c0 c0*	      hex	c0c0c0c0808090900010180c04243800
    129  f245				   Bitmap5
    130  f245		       00		      hex	00
    131  f246		       00 00 00 fc*	      hex	000000fcfefc1c0c040402020202040c
    132  f256		       f8 00 e0 18*	      hex	f800e01804040402020101010111e192
    133  f266		       dc 70 00 00*	      hex	dc700000000000000000000080808000
    134  f276		       00 00 00 00*	      hex	00000000000000000000000000000000
    135  f286							;;
    136  f286
    137  f286							; Epilogue
    138  fffc					      org	$fffc
    139  fffc		       00 f0		      .word.w	Start
    140  fffe		       00 f0		      .word.w	Start
